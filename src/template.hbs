# {{title}}

{{#if logo}}
logo
{{/if}}

{{#if description}}
{{{description}}}
{{/if}}

{{{shield "license" slug}}}
{{{shield "commitsSince" slug tag}}} {{{shield "lastCommit" slug}}} {{{shield "issues" slug}}}
{{{shield "npmLatest" pkg.name}}} {{{shield "dependents" pkg.name slug}}} {{{shield "npmDownloads" pkg.name}}}

{{#if installationCommands.length}}
## Installation
{{#each installationCommands}}
{{{shield header ../pkg.name}}}
```bash
{{command}}
```
{{/each}}
{{#if webCompatible}}
{{{shield "web" pkg.name}}}
```html
<script src="https://cdn.jsdelivr.net/npm/{{{pkg.name}}}@{{{pkg.version}}}/index.js"/>
```
{{/if}}
{{/if}}

{{#if example}}
## Example
```javascript
{{{example}}}
```
{{/if}}

{{#if config.tryInBrowser}}
## Try it out

{{{shield "web" pkg.name}}}

Open a browser's JavaScript console and execute:

```javascript
const scriptElement = document.createElement("script");
scriptElement.setAttribute("type", "text/javascript");
scriptElement.setAttribute("src", "https://cdn.jsdelivr.net/npm/{{pkg.name}}@{{pkg.version}}/index.js");
document.querySelector("head").appendChild(scriptElement);
```

{{{title}}} is now stored in the global variable `{{{globalName}}}`. The following console expression should return something other than `"undefined"`.

```javascript
typeof {{globalName}}.default
```
{{/if}}

{{{apiMarkdown}}}
{{#if binName}}
## CLI Usage
After installing package `{{{pkg.name}}}` globally, you can use its command line interface.
```bash
{{{binExample}}}
```
For usage instructions:
```bash
{{{binName}}} --help
```
{{/if}}

{{#if license}}
## License
```text
{{{license}}}
```
{{/if}}