# {{title}}

{{#if logo}}
logo
{{/if}}

{{{shield "license" slug}}}  
{{#if config.githubActions}}{{{shield "actions" slug}}}{{/if}} {{{shield "commitsSince" slug tag}}} {{{shield "lastCommit" slug}}} {{{shield "issues" slug}}}  
{{#if installationCommands.length}}
{{{shield "npmLatest" pkg.name}}} {{{shield "dependents" pkg.name slug}}} {{{shield "npmDownloads" pkg.name}}}
{{/if}}

{{#if description}}
**{{{description}}}**
{{/if}}

{{#if config.personal}}
#### Opinionated

This project is tailored to my personal needs and workflows and therefore highly opinionated. Feel free to use it or get inspired by it, but please do not get frustrated if you come across weird features or have difficulties integrating it in your own ecosystem.
{{/if}}

{{{fragments.description}}}

{{{fragments.warning}}}

{{{fragments.example}}}

{{{fragments.usage}}}

{{{fragments.advancedUsage}}}

{{{fragments.options}}}

{{#if installationCommands.length}}
## Installation
{{#each installationCommands}}
{{{shield header ../pkg.name}}}
```bash
{{command}}
```
{{/each}}
{{#if webCompatible}}
{{{shield "jsdelivr" pkg.name}}} {{{shield "unpkg" pkg.name}}}
```html
<script src="https://cdn.jsdelivr.net/npm/{{{pkg.name}}}@{{{pkg.version}}}/index.js"/>
```
{{/if}}
{{/if}}

{{#if example}}
## Example
```javascript
{{{example}}}
```
{{/if}}

{{#if config.tryInBrowser}}
## Try it out

{{{shield "web" pkg.name}}}

Open a browser's JavaScript console and execute:

```javascript
const scriptElement = document.createElement("script");
scriptElement.setAttribute("type", "text/javascript");
scriptElement.setAttribute("src", "https://cdn.jsdelivr.net/npm/{{pkg.name}}@{{pkg.version}}/index.js");
document.querySelector("head").appendChild(scriptElement);
```

{{{title}}} is now stored in the global variable `{{{globalName}}}`. The following console expression should return something other than `"undefined"`.

```javascript
typeof {{globalName}}.default
```
{{/if}}

{{{apiMarkdown}}}
{{#if binName}}
## CLI Usage
After installing package `{{{pkg.name}}}` globally, you can use its command line interface.
```bash
{{{binExample}}}
```
For usage instructions:
```bash
{{{binName}}} --help
```
{{/if}}

{{#if hasEnvironmentVariables}}
## Environment Variables

Following environment variables are read by {{{title}}}:

Name|Description
---|---
{{#each config.environmentVariables}}
{{{@key}}}|{{{this}}}
{{/each}}
{{/if}}

{{{fragments.legal}}}

{{#if hasDevelopmentSection}}
## Development

{{{fragments.development}}}

{{#each developmentScripts}}
{{{name}}}
```bash
{{{script}}}
```
{{/each}}

{{/if}}

{{#if license}}
## License
```text
{{{license}}}
```
{{/if}}